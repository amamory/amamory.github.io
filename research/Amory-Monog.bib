JURACY, Leonardo Rezende. Projeto de uma Célula Latch Testável. End of Term Work. Computer Engineering - PUCRS, 2015. 90p. (Presented and approved. Advisor: Alexandre de Morais Amory, Co-Advisor: Matheus Trevisan Moreira). (In Portuguese)

@TECHREPORT{jura-tcc-2016,
     author = {Leonardo Rezende Juracy},
     title  = {Projeto de uma Célula Latch Testável},
     institution = {Faculdade de Informática, {Pontifícia Universidade Católica do Rio Grande do Sul (PUCRS)}},
     year   = 2016,
     type   = {End of Term Work in Computer Engineering},
     note   = {Advisor: Alexandre de Morais Amory, Co-Advisor: Matheus Trevisan Moreira}
}


@phdthesis{wachter2015,
    title    = {{Layered approach for runtime fault recovery in NOC-Based MPSOCS}},
    school   = {Faculdade de Informática, {Pontifícia Universidade Católica do Rio Grande do Sul (PUCRS)}},
    author   = {Wachter, Eduardo Weber},
    year     = {2015},
    address  = {Porto Alegre, Brasil},
    keywords = {GAPH,MPSoC, fault tolerance, coadvised},
    url_link = {http://hdl.handle.net/10923/7538},
    xxxurl_code = {https://bitbucket.org/nguyenthanhvuh/dig/},
    xxxurl_paper = {Pub/mpp.pdf},
    xxxurl_slides = {Pub/icse14_pres.pdf},
    abstract   = {Mechanisms for fault-tolerance in MPSoCs are mandatory to cope with defects during fabrication or faults during product lifetime. For instance, permanent faults on the interconnect network can stall or crash applications, even though the MPSoCs’ network has alternative faultfree paths to a given destination. Runtime Fault Tolerance provide self-organization mechanisms to continue delivering their processing services despite defective cores due to the presence of permanent and/or transient faults throughout their lifetime. This Thesis presents a runtime layered approach to a fault-tolerant MPSoC, where each layer is responsible for solving one part of the problem. The approach is built on top of a novel small specialized network used to search fault-free paths. The first layer, named physical layer, is responsible for the fault detection and fault isolation of defective routers. The second layer, named the network layer, is responsible for replacing the original faulty path by an alternative fault-free path. A fault-tolerant routing method executes a path search mechanism and reconfigures the network to use the faulty-free path. The third layer, named transport layer, implements a fault-tolerant communication protocol that triggers the path search in the network layer when a packet does not reach its destination.The last layer, application layer, is responsible for moving tasks from the defective processing element (PE) to a healthy PE, saving the task’s internal state, and restoring it in case of fault while executing a task. Results at the network layer, show a fast path finding method. The entire process of finding alternative paths takes typically less than 2000 clock cycles or 20 microseconds. In the transport layer, different approaches were evaluated being capable of detecting a lost message and start the retransmission. The results show that the overhead to retransmit the message is 2.46X compared to the time to transmit a message without fault, being all other messages transmitted with no overhead. For the DTW, MPEG, and synthetic applications the average-case application execution overhead was 0.17%, 0.09%, and 0.42%, respectively. This represents less than 5% of the application execution overhead worst case. At the application layer, the entire fault recovery protocol executes fast, with a low execution time overhead with no faults (5.67%) and with faults (17.33% - 28.34%).},
    note   = {Advisor: Fernando Gehm Moraes, Co-Advisor: Alexandre de Morais Amory}
}

@mastersthesis{barreto2015,
  author       = {Barreto, Francisco Favorino da Silva}, 
  title        = {{Tolerância a falhas em elementos de processamento de MPSoCs}},
  school       = {Faculdade de Informática, {Pontifícia Universidade Católica do Rio Grande do Sul (PUCRS)}},
  year         = 2015,
  address      = {Porto Alegre, Brasil},
  url_link     = {http://hdl.handle.net/10923/7743},
  keywords     = {GAPH,MPSoC, advised}, 
  abstract     = {The need of more processing capacity for embedded systems nowadays is pushing the research of MPSoCs with tens or hundreds of processors. These characteristics bring design challenges such as scalability and dependability. Such complex systems must have fault tolerant methods to ensure acceptable reliability and availability. This way, the user is not exposed to significant data losses, malfunctioning and even the total system failure. Considering this technology trend, the present work proposes a fault tolerance method with focus in fault recovery. The method uses concepts largely explored in distributed systems to solve the problem of permanent failures in the processing elements of MPSoCs. The implementation is exclusively in software, and recovers the system exposed to a permanent failure on processing elements, reallocating all tasks that were executing in the faulty element to a healthy processing element. The failed application tasks restart their executions since there is no context saving, enabling a lightweight method. The experiments are performed in the HeMPS platform, evaluating the most relevant parameters as recovery time, communication bandwidth impact, scalability and others. In the absence of faults, the proposed protocol has 21 Kbytes of memory area (20% more compared to the original kernel) and no overhead in terms of execution time. In the presence of faults, the results demonstrate total recovery times from 0.2ms to 1ms, depending on the number of reallocated tasks (1 to 7). The biggest impact in the protocol time is related with the reallocation task phase.},
  note   = {Advisor: Alexandre de Morais Amory}
}

@mastersthesis{morais2015,
  author     = {Morais, Márcio Godoy},
  title      = {{Integration of a multi-agent system into a robotic framework: a case study of a cooperative fault diagnosis application}},
  school     = {Faculdade de Informática, {Pontifícia Universidade Católica do Rio Grande do Sul (PUCRS)}},
  year       = {2015},
  address    = {Porto Alegre, Brasil},
  url_link   = {http://hdl.handle.net/10923/7687},
  keywords   = {LSA,robotics, advised},
  abstract   = {Programming multi-robot autonomous systems can be extremely complex without appropriate software development techniques to abstract hardware faults, as well as can be hard to deal with the complexity of software required the coordinated autonomous behavior. Real environments are dynamic and unexpected events may occur, leading a robot to unforeseen situations or even fault situations. This work presents a method of integration of Jason multi-agent system into ROS robotic framework. Through this integration, can be easier to describe complex missions by using Jason agent language and its resources, as well as abstracting hardware details from the decision-taken process. Moreover, software modules related to the hardware control and modules which have a high CPU cost are separated from the planning and decision-taken process in software layers, allowing plan and software modules reuse in different missions and robots.Through this integration, Jason resources such as plans reconsideration and contingency plans can be used in a way where they can enable the robot to reconsider its actions and strategies in order to reach its goals or to take actions to deal with unforeseen situations due the environment unpredictability or even some robot hardware fault. The presented integration method also allows the cooperation between multiple robots through a standardized language of communication between agents. The proposed method is validated by a case study applied in real robots where a robot can detect a fault in its hardware and diagnose it through the help of another robot, in a highly abstract method of cooperative diagnosis.},
  note   = {Advisor: Alexandre de Morais Amory}
}

@mastersthesis{romani2015,
  author     = {Roman, Felipe de Fraga},
  title      = {{Fault supervision for multi robotics systems}},
  school     = {Faculdade de Informática, {Pontifícia Universidade Católica do Rio Grande do Sul (PUCRS)}},
  year       = {2015},
  address    = {Porto Alegre, Brasil},
  url_link   = {http://hdl.handle.net/10923/7732},
  keywords   = {LSA,robotics, advised},
  abstract   = {As robotics becomes more common and people start to use it in routine tasks, dependability becomes more and more relevant to create trustworthy solutions. A commonly used approach to provide reliability and availability is the use of multi robots instead of a single robot. However, in case of a large teams of robots (tens or more), determining the system status can be a challenge. This work presents a runtime monitoring solution for Multi Robotic Systems. It integrates Nagios IT Monitoring tool and ROS robotic middleware. One of the potential advantages of this approach is that the use of a consolidated IT infrastructure tool enables the reuse of several relevant features developed to monitor large datacenters. Another important advantage of that this solution does not require additional software at the robot side. The experimental results demonstrate that the proposed monitoring system has a small performance impact on the robot and the monitoring server can easily support hundreds or even thousands of monitored robots.},
  note   = {Advisor: Alexandre de Morais Amory}
}

@mastersthesis{kuentzer2014,
  author     = {Kuentzer, Felipe Augusto},
  title      = {{Otimização e análise de algoritmos de ordenamento de redes proteicas}},
  school     = {Faculdade de Informática, {Pontifícia Universidade Católica do Rio Grande do Sul (PUCRS)}},
  year       = {2014},
  address    = {Porto Alegre, Brasil},
  url_link   = {http://hdl.handle.net/10923/6663},
  keywords   = {bioinformatics, software optimization, seriation, advised},
  abstract   = {Analysis by Transcriptogram was developed as a solution to noise reduction, usually present in the microarray measuring technique of the Transcriptome, and has demonstrated potential to be applied as a method of disease diagnostics. The noise reduction in the measure is achived by the protein interaction network ordering, allowing gene expression analysis in whole genome scale. The Transcriptogram's efficiency to noise reduction was analyzed, however, it still lacks an analisys of the ordering quality, so that the best parameter setting for the ordering algorithm is used by the Transcriptogram. So far, this analysis is hindered by the high runtime of the ordering algorithm. In this work, an analysis of the ordering algorithm stages allows some optimizations, and consequent reduction in execution time, also allowing further analysis on which parameters settings have the greatest influence on the ordering quality. Applying the Transcriptogram to a diagnostic problem, the diagnostic measure is used to characterize the influence of the parameters of the ordering algorithm to achive better diagnoses. The results show that the protein network used in previous works doesn't produce the best diagnostics. Moreover, the ordering minimization, achieved by executing the ordering algorithm for longer periods, does not necessarily increase the probability to find better diagnosis compared to random ordering. Eventhough the experimental diagnostic results could not statistically differentiate random ordering from optimized ordering, these results cannot be considered conclusive since a single disease has been evaluated.},
  note   = {Advisor: Alexandre de Morais Amory}
}


@mastersthesis{mandelli2011,
  author     = {Mandelli, Marcelo Grandi},
  title      = {{Mapeamento dinâmico de aplicações para MPSOCS homogêneos}},
  school     = {Faculdade de Informática, {Pontifícia Universidade Católica do Rio Grande do Sul (PUCRS)}},
  year       = {2011},
  address    = {Porto Alegre, Brasil},
  url_link   = {http://hdl.handle.net/10923/1634},
  keywords   = {GAPH,MPSoC, coadvised},
  abstract   = {The advance in manufacturing technology of integrated circuits enables smaller transistors, making possible the development of SoCs (System-on-Chip). Many applications require multi-processor SoCs in order to meet their performance requirements. A SoC containing several processing elements (PEs) is called MPSoC. An MPSoC can be classified as homogeneous, when all their PEs has the same architecture; or heterogeneous, when they have different architectures. . As communication infrastructure, the MPSoC can use NoCs as a way to interconnect the PEs. NoCs may be used to replace busses, due to their advantages of higher scalability and communication parallelism.One of the main problems related to MPSoC projects is to define a PE of the system that will run each task. This problem is called task mapping. The mapping can be classified into static, which occurs at design time, and dynamic that occurs at runtime. The dynamic mapping approach requires firstly the mapping of the initial tasks of an application (which does not depend on any other task). The other tasks, in this approach, are mapped dynamically when requested. The mapping can be also classified by the number of tasks running in a PE. The mapping is classified as single task, when only one task is executed by a PE, and as multitask, when multiple tasks can be executed in a same PE.This work proposes new single task and multitask dynamic task mapping heuristics, in order to reduce communication energy. Results are evaluated using the MPSoC HeMPS, which executes application code generated from a model-based simulation environment. These heuristics are compared with mapping heuristic presented in literature, obtaining, in the evaluated scenarios, an average communication energy reduction of 9.8%, for the single task approach, and 18.6%, for the multitask approach. This work also evaluates the inclusion of dynamic load on the system, which makes necessary the implementation of an initial tasks mapping heuristic. This heuristic is an innovative contribution, since a similar approach is not found in any other work in literature.}
  note   = {Advisor: Fernando Gehm Moraes, Co-Advisor: Alexandre de Morais Amory}
}

